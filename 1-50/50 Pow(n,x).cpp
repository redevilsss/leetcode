#include<iostream>
using namespace std;

//50 Pow(x,n)
/*
实现 pow(x, n) ，即计算 x 的 n 次幂函数。
示例 1:
输入: 2.00000, 10     输出: 1024.00000

示例 2:
输入: 2.10000, 3        输出: 9.26100

示例 3:
输入: 2.00000, -2      输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
*/

/*
*之前在剑指offer中用过的方法在这里检测时无法通过
*因为当x为负的最大值时，是无法取反的，取反就会溢出
*所以整个过程中尽量不要出现取反这些操作，使用了别人的算法
*很简练，值得学习
*/
//思想:对n进行除2操作，同时对x进行*2操作
//如果n除2有余，更新res*=x
double myPow(double x, int n)
{
	double res = 1.0;
	for (int i = n; i != 0; i /= 2)
	{
		if (i % 2 != 0)
			res *= x;
		//以n=10为例分析
		x *= x;//x最终保存的是小于n的最大的2的次方，n=10，x就是2的8次方
		//res更新了两次，第一次是i等于5时，乘上了2的2次方，
		//第二次就是i等于1时，乘上了2的8次方
		//因为i肯定会有一刻等于1，所以上面所提的最终x保存的数一定会被乘上
		//x一直在求平方，当i为奇数时会给res补上当前的平方值
		//这样理解：2^10=4^5=16^2*4=256*4
		//第一次改变res发生在第三步，给res先乘4，再进行下一步合并
	}
	return n<0 ? 1 / res : res;
}