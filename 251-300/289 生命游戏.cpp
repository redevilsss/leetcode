#include<iostream>
#include<vector>
using namespace std;
//289 生命游戏

/*
根据百度百科，生命游戏，简称为生命，是英国数学家约翰・何顿・康威在1970年发明的细胞自动机。
给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。
*/

//因为题目要求的是同时变化，而实际操作只能遍历数组来实现，所以修改的值不能影响下一步的操作
//所以这里选择将由dead变为live的细胞置为3，由live变dead的细胞置为2
//这样就不会影响到后面的变换，最终只需要遍历数组将3变成1，将2变成0即可
void gameOfLife(vector<vector<int>>& board) {
	int m = board.size();
	int n = board[0].size();
	for (int i = 0; i<m; i++)
	{
		for (int j = 0; j<n; j++)
		{
			//注意，某位置为2，证明之前是活的，在判断周围情况时也要算上
			int lives = 0;
			if (i>0)//判断正上方
				lives += board[i - 1][j] == 1 || board[i - 1][j] == 2 ? 1 : 0;
			if (i>0 && j<n - 1)//判断右上角
				lives += board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == 2 ? 1 : 0;
			if (j<n - 1)//判断正右方
				lives += board[i][j + 1] == 1 || board[i][j + 1] == 2 ? 1 : 0;
			if (i<m - 1 && j<n - 1)//判断右下角
				lives += board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == 2 ? 1 : 0;
			if (i<m - 1)//判断正下方
				lives += board[i + 1][j] == 1 || board[i + 1][j] == 2 ? 1 : 0;
			if (i<m - 1 && j>0)//判断左下方
				lives += board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == 2 ? 1 : 0;
			if (j>0)//判断正左方
				lives += board[i][j - 1] == 1 || board[i][j - 1] == 2 ? 1 : 0;
			if (i>0 && j>0)//判断左上方
				lives += board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == 2 ? 1 : 0;
			//当dead细胞周围有3个活细胞时复活
			if (board[i][j] == 0 && lives == 3)
				board[i][j] = 3;
			//当live细胞周围的活细胞数小于2或大于3时 死亡
			else if (board[i][j] == 1 && (lives>3 || lives<2))
				board[i][j] = 2;
		}
	}
	//遍历数组将3变成1，将2变成0
	for (int i = 0; i<m; i++)
	{
		for (int j = 0; j<n; j++)
		{
			board[i][j] = board[i][j] % 2;
		}
	}
}